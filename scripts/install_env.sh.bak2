#!/usr/bin/env bash
set -euo pipefail

ENV_NAME="${1:-doft_v12}"
CONDA_BASE="$(conda info --base)"

echo "[env] creando/asegurando entorno: $ENV_NAME"
if ! conda env list | awk '{print $1}' | grep -qx "$ENV_NAME"; then
  conda create -y -n "$ENV_NAME" python=3.10 -c conda-forge
else
  echo "[env] ya existe $ENV_NAME, no se recrea"
fi

# Activar env (sin depender de login shell)
source "$CONDA_BASE/etc/profile.d/conda.sh"
conda activate "$ENV_NAME"

# Paquetes base (sin torch aquí)
pip install -r requirements.txt

# Instalar Torch solo si falta o si no es build CUDA
python - <<'PY'
import sys, importlib.util as iu
ok=False
if iu.find_spec("torch"):
    import torch
    ok = torch.cuda.is_available() and bool(torch.version.cuda)
print("HAS_GOOD_TORCH=" + ("1" if ok else "0"))
PY
HAS_GOOD_TORCH=$(python - <<'PY'
import sys, importlib.util as iu
ok=False
if iu.find_spec("torch"):
    import torch
    ok = torch.cuda.is_available() and bool(torch.version.cuda)
print("1" if ok else "0")
PY
)

if [ "$HAS_GOOD_TORCH" = "1" ]; then
  echo "[torch] ya presente con CUDA ✅"
else
  echo "[torch] instalando wheel CUDA para JetPack 6.0…"
  pip uninstall -y torch torchvision torchaudio >/dev/null 2>&1 || true
  pip cache purge >/dev/null 2>&1 || true
  # Wheels NVIDIA para JP6.0 / CUDA 12.x
  pip install --no-deps --force-reinstall \
  ~/wheels/torch-2.3.0-cp310-cp310-linux_aarch64.whl \
  ~/wheels/torchvision-0.18.0-cp310-cp310-linux_aarch64.whl
fi

# Blindar para que no se cuele ~/.local
mkdir -p "$CONDA_PREFIX/etc/conda/activate.d"
cat > "$CONDA_PREFIX/etc/conda/activate.d/10-doft.sh" <<'EOF'
export PYTHONNOUSERSITE=1
export OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1 NUMEXPR_NUM_THREADS=1
EOF

echo "[check] verificación rápida:"
python - <<'PY'
import sys, torch
print(sys.executable)
print("torch:", torch.__version__,
      "| cuda avail:", torch.cuda.is_available(),
      "| built with:", torch.version.cuda)
if torch.cuda.is_available():
    x=torch.randn(2048,2048,device='cuda'); y=x@x; torch.cuda.synchronize()
    print("CUDA OK:", y.shape)
else:
    raise SystemExit("CUDA no disponible en este env")
PY
